# -*- coding: utf-8 -*-
# Generated by Django 1.9.5 on 2016-04-30 22:27
from __future__ import unicode_literals

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django_countries.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Certificate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='Repleo', max_length=128, validators=[django.core.validators.RegexValidator('^[0-9a-zA-Z@#$%^&+=\\_\\.\\-\\,]*$', 'Only alphanumeric characters and [@#$%^&+=_,-.] are allowed.')])),
                ('type', models.CharField(choices=[('R', 'Root Certificate'), ('I', 'Intermediate'), ('S', 'Server Certificate'), ('C', 'Client Certificate'), ('O', 'OCSP Signing Certificate')], max_length=1)),
            ],
            options={
                'db_table': 'bounca_certificate',
            },
        ),
        migrations.CreateModel(
            name='DistinguishedName',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('countryName', django_countries.fields.CountryField(default='NL', help_text='The two-character country name in ISO 3166 format.', max_length=2)),
                ('stateOrProvinceName', models.CharField(default='Noord Holland', help_text="The state/region where your organization is located. This shouldn't be abbreviated. The stateorprov is 1–128 characters.", max_length=128, validators=[django.core.validators.RegexValidator('^[0-9a-zA-Z@#$%^&+=\\_\\.\\-\\,]*$', 'Only alphanumeric characters and [@#$%^&+=_,-.] are allowed.')])),
                ('localityName', models.CharField(default='Amstelveen', help_text='The city where your organization is located. The locality is 1–128 characters.', max_length=128, validators=[django.core.validators.RegexValidator('^[0-9a-zA-Z@#$%^&+=\\_\\.\\-\\,]*$', 'Only alphanumeric characters and [@#$%^&+=_,-.] are allowed.')])),
                ('organizationName', models.CharField(default='Repleo', help_text='The legal name of your organization. This should not be abbreviated and should include suffixes such as Inc, Corp, or LLC.', max_length=64, validators=[django.core.validators.RegexValidator('^[0-9a-zA-Z@#$%^&+=\\_\\.\\-\\,]*$', 'Only alphanumeric characters and [@#$%^&+=_,-.] are allowed.')])),
                ('organizationalUnitName', models.CharField(default='IT Department', help_text='The division of your organization handling the certificate.', max_length=64, validators=[django.core.validators.RegexValidator('^[0-9a-zA-Z@#$%^&+=\\_\\.\\-\\,]*$', 'Only alphanumeric characters and [@#$%^&+=_,-.] are allowed.')])),
                ('emailAddress', models.EmailField(default='ca@repleo.nl', help_text='An email address used to contact your organization.', max_length=64, validators=[django.core.validators.RegexValidator('^[0-9a-zA-Z@#$%^&+=\\_\\.\\-\\,]*$', 'Only alphanumeric characters and [@#$%^&+=_,-.] are allowed.')])),
                ('commonName', models.CharField(default='*.repleo.nl', help_text='The fully qualified domain name (FQDN) of your server. This must match exactly what you type in your web browser or you will receive a name mismatch error.', max_length=64, validators=[django.core.validators.RegexValidator('^[0-9a-zA-Z@#$%^&+=\\_\\.\\-\\,]*$', 'Only alphanumeric characters and [@#$%^&+=_,-.] are allowed.')])),
            ],
            options={
                'db_table': 'bounca_distinguished_name',
            },
        ),
        migrations.AddField(
            model_name='certificate',
            name='dn',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='x509_pki.DistinguishedName'),
        ),
        migrations.AddField(
            model_name='certificate',
            name='parent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='x509_pki.Certificate'),
        ),
    ]
