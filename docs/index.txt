Welcome to BounCA documentation!
=========================================

``BounCA``


https://jamielinux.com/docs/openssl-certificate-authority/sign-server-and-client-certificates.html


http://www.ibm.com/support/knowledgecenter/#!/SSB23S_1.1.0.13/gtps7/cfgcert.html
https://docs.oracle.com/cd/E19957-01/816-5531-10/app_dn.htm
https://tools.ietf.org/html/rfc1779
https://www.entrust.com/resources-downloads/x509/
https://www.safelayer.com/en/solutions/public-key-infrastructure?gclid=CIfHhaOOxswCFRATGwodbzoOgw
http://www.openxpki.org
https://pki.io

https://www.digicert.com/ssl-support/pem-ssl-creation.htm

Setup OCSP host:
https://jamielinux.com/docs/openssl-certificate-authority/online-certificate-status-protocol.html



Verify the root certificate

# openssl x509 -noout -text -in certs/ca.cert.pem
The output shows:

the Signature Algorithm used
the dates of certificate Validity
the Public-Key bit length
the Issuer, which is the entity that signed the certificate
the Subject, which refers to the certificate itself
The Issuer and Subject are identical as the certificate is self-signed. Note that all root certificates are self-signed.

Signature Algorithm: sha256WithRSAEncryption
    Issuer: C=GB, ST=England,
            O=Alice Ltd, OU=Alice Ltd Certificate Authority,
            CN=Alice Ltd Root CA
    Validity
        Not Before: Apr 11 12:22:58 2015 GMT
        Not After : Apr  6 12:22:58 2035 GMT
    Subject: C=GB, ST=England,
             O=Alice Ltd, OU=Alice Ltd Certificate Authority,
             CN=Alice Ltd Root CA
    Subject Public Key Info:
        Public Key Algorithm: rsaEncryption
            Public-Key: (4096 bit)
The output also shows the X509v3 extensions. We applied the v3_ca extension, so the options from [ v3_ca ] should be reflected in the output.

X509v3 extensions:
    X509v3 Subject Key Identifier:
        38:58:29:2F:6B:57:79:4F:39:FD:32:35:60:74:92:60:6E:E8:2A:31
    X509v3 Authority Key Identifier:
        keyid:38:58:29:2F:6B:57:79:4F:39:FD:32:35:60:74:92:60:6E:E8:2A:31

    X509v3 Basic Constraints: critical
        CA:TRUE
    X509v3 Key Usage: critical
        Digital Signature, Certificate Sign, CRL Sign
        
        
        

        
Verify the intermediate certificate

As we did for the root certificate, check that the details of the intermediate certificate are correct.

# openssl x509 -noout -text \
      -in intermediate/certs/intermediate.cert.pem
Verify the intermediate certificate against the root certificate. An OK indicates that the chain of trust is intact.

# openssl verify -CAfile certs/ca.cert.pem \
      intermediate/certs/intermediate.cert.pem

intermediate.cert.pem: OK